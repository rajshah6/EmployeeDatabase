/*
 * Rose, Raj, Sophie
 * August 18th, 2023
 * This program will allow the user to store the data of students, employees and the inventory at a school
 * This frame is the student information page. 
 */

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;

public class FrmStudentPage extends javax.swing.JFrame {

    /**
     * Creates new form FrmStudentPage
     */
    public FrmStudentPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnHelp = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        lblStudentNumber = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        txtStudentNumber = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblDob = new javax.swing.JLabel();
        txtDob = new javax.swing.JTextField();
        lblGrade = new javax.swing.JLabel();
        lblParentContactName = new javax.swing.JLabel();
        txtParentContactName = new javax.swing.JTextField();
        lblParentContactEmail = new javax.swing.JLabel();
        txtParentContactEmail = new javax.swing.JTextField();
        lblParentContactPhone = new javax.swing.JLabel();
        txtParentContactPhone = new javax.swing.JTextField();
        lblAverageMark = new javax.swing.JLabel();
        txtAverageMark = new javax.swing.JTextField();
        btnList = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHelp1 = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnStudentMarksAverage = new javax.swing.JButton();
        lblCalculations = new javax.swing.JLabel();
        cboGrade = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        btnHelp.setText("?");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Data");
        setName("studentFrame"); // NOI18N
        setResizable(false);

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblStudentNumber.setText("Student #:");

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student #", "First Name", "Last Name", "Email", "Grade", "DOB", "Average Mark", "Parent Name", "Parent Email", "Parent Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStudent.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblStudent);
        if (tblStudent.getColumnModel().getColumnCount() > 0) {
            tblStudent.getColumnModel().getColumn(0).setResizable(false);
            tblStudent.getColumnModel().getColumn(0).setPreferredWidth(65);
            tblStudent.getColumnModel().getColumn(1).setResizable(false);
            tblStudent.getColumnModel().getColumn(2).setResizable(false);
            tblStudent.getColumnModel().getColumn(3).setResizable(false);
            tblStudent.getColumnModel().getColumn(3).setPreferredWidth(180);
            tblStudent.getColumnModel().getColumn(4).setResizable(false);
            tblStudent.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblStudent.getColumnModel().getColumn(5).setResizable(false);
            tblStudent.getColumnModel().getColumn(5).setPreferredWidth(70);
            tblStudent.getColumnModel().getColumn(6).setResizable(false);
            tblStudent.getColumnModel().getColumn(7).setResizable(false);
            tblStudent.getColumnModel().getColumn(8).setResizable(false);
            tblStudent.getColumnModel().getColumn(8).setPreferredWidth(170);
            tblStudent.getColumnModel().getColumn(9).setResizable(false);
            tblStudent.getColumnModel().getColumn(9).setPreferredWidth(115);
        }

        lblFirstName.setText("First Name: ");

        lblLastName.setText("Last Name: ");

        lblEmail.setText("Email: ");

        lblDob.setText("Date of Birth (dd/mm/yyyy): ");

        lblGrade.setText("Grade: ");

        lblParentContactName.setText("Parent Contact Info:     Name: ");

        lblParentContactEmail.setText("Email: ");

        lblParentContactPhone.setText("Phone #: ");

        lblAverageMark.setText("Average Mark: ");

        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHelp1.setText("?");
        btnHelp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelp1ActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTitle.setText("Student Data");

        btnStudentMarksAverage.setText("Student Marks Average");
        btnStudentMarksAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentMarksAverageActionPerformed(evt);
            }
        });

        cboGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "9", "10", "11", "12" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReturn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHelp1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStudentMarksAverage)
                        .addGap(18, 18, 18)
                        .addComponent(lblCalculations, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 318, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnAdd)
                        .addGap(147, 147, 147)
                        .addComponent(btnRemove)
                        .addGap(172, 172, 172)
                        .addComponent(btnEdit)
                        .addGap(196, 196, 196)
                        .addComponent(btnList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch)
                        .addGap(33, 33, 33)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblParentContactName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtParentContactName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDob)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAverageMark)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAverageMark, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblGrade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblParentContactEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtParentContactEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblParentContactPhone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtParentContactPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStudentNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtStudentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblLastName)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnHelp1)
                    .addComponent(lblTitle))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentNumber)
                    .addComponent(txtStudentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblGrade)
                        .addComponent(cboGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDob)
                        .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAverageMark)
                        .addComponent(txtAverageMark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblParentContactName)
                    .addComponent(txtParentContactName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblParentContactEmail)
                    .addComponent(txtParentContactEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblParentContactPhone)
                    .addComponent(txtParentContactPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove)
                    .addComponent(btnEdit)
                    .addComponent(btnList)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStudentMarksAverage)
                    .addComponent(lblCalculations, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        readFile(students);//read the file
        //temp variables
        int studentNumber = -1, grade;
        long parentContactPhone = -1;
        String firstName, lastName, email, parentContactName, parentContactEmail, dob;
        double averageMark = -1; 
        
        //if all of the fields are filled
        if (!txtStudentNumber.getText().equals("") && !txtFirstName.getText().equals("") && 
                !txtLastName.getText().equals("") && !txtEmail.getText().equals("") && 
                !txtParentContactPhone.getText().equals("") && !txtDob.getText().equals("") && 
                !txtParentContactName.getText().equals("") && !txtParentContactEmail.getText().equals("") && 
                cboGrade.getSelectedIndex() != 0 && !txtAverageMark.getText().equals(""))
        {
            try 
            {
                studentNumber = Integer.parseInt(txtStudentNumber.getText());//read the user's input into the variable
                //check if this already exists in the array
                if (searchNumber(students, studentNumber) != -1)//if the number is already used
                {
                    JOptionPane.showMessageDialog(rootPane, "The student # has already been taken. ");//popup to tell the user that this number can't be used
                    studentNumber = -1;//reset the employee number to -1 (for checking later)
                }
                
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The student # must be an integer. ");//popup to tell the user that they need to enter an integer
            }
            //store the first name, last name, email, parent name and parent email in their variables
            firstName = txtFirstName.getText();
            lastName = txtLastName.getText();
            email = txtEmail.getText();
            parentContactName = txtParentContactName.getText();
            parentContactEmail = txtParentContactEmail.getText();
            
            //check validity of date of birth
            dob = txtDob.getText();//store the user's entered DOB
            if (!checkDob(dob))//if the entered date is not valid
            {
                dob = null;//set the variable to null (for checking later)
                JOptionPane.showMessageDialog(rootPane, "The date of birth must be a valid date. ");//popup to tell the user that they didn't enter a valid date
            }
            
            //get the grade entered by the user
            grade = Integer.parseInt((String)cboGrade.getSelectedItem());//read the user's input for grade
            
            //check validity of average mark
            try
            {
                averageMark = Double.parseDouble(txtAverageMark.getText());//read the user's input for average mark
                if (averageMark < 0 || averageMark > 100)//if the mark is not between 0 and 100
                {
                    averageMark = -1;//reset the mark to -1 (for checking later)
                    JOptionPane.showMessageDialog(rootPane, "The average mark must be between 0 and 100. ");//popup to tell the user they need to enter a number between 0 and 100
                }
            }
            catch (NumberFormatException e )
            {
                JOptionPane.showMessageDialog(rootPane, "The average mark must be a number. ");//popup to tell the user they need to enter a double
            }
            
            //check validity of phone number
            if (txtParentContactPhone.getText().length() == 10)
            {
                try
                {
                    parentContactPhone = Long.parseLong(txtParentContactPhone.getText());//read the user's input for the parent phone
                }
                catch (NumberFormatException e)
                {
                    JOptionPane.showMessageDialog(rootPane, "The parent phone # must be an integer. ");//popup to tell the user they need to enter an integer
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "The parent phone # must 10 digits long. ");//popup to tell the user they need to enter a 10 digit number
            }
            
            if (studentNumber != -1 && dob != null && averageMark != -1 && parentContactPhone != -1)//if the user entered all the proper information
            {
                //add student
                students.add(new Student (firstName, lastName, dob, email, studentNumber, grade, parentContactName, parentContactEmail, parentContactPhone, averageMark));
                sortArraylist(students);//sort the arraylist
                writeFile(students);//update the file
                //reset all the fields to be empty
                reset(txtStudentNumber, txtFirstName, txtLastName, txtEmail, txtDob, txtAverageMark, txtParentContactName, txtParentContactEmail, txtParentContactPhone, cboGrade, lblCalculations);
            }
        }
        else 
        {
            JOptionPane.showMessageDialog(rootPane, "All the fields must be filled. ");//popup to tell the user not all the fields were filled
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)tblStudent.getModel();
        if (tblStudent.getSelectedRowCount() == 1)//if the user selected a single row
        {
            int rowIndex = tblStudent.getSelectedRow();//variable to store the row the user chose
            int number = (int)tblStudent.getValueAt(rowIndex, 0);//variable for the student number of the row the user wants to remove
            removeStudent(students, number);//remove the student from the arraylist
            tblModel.removeRow(rowIndex);//remove the row from the table
        }
        else
        {
            int employeeNumber;//temp variable for user's entered number
            if (!txtStudentNumber.getText().equals(""))//if the user entered an student number, use it
            {
                try
                {
                    employeeNumber = Integer.parseInt(txtStudentNumber.getText());//store the user's entered number in the variable
                    if (!removeStudent(students, employeeNumber))
                    {
                        JOptionPane.showMessageDialog(rootPane, "The student # does not exist in the system. ");//popup to tell the user that the student number they entered doesn't exist
                    }
                }
                catch (NumberFormatException e)
                {
                    JOptionPane.showMessageDialog(rootPane, "The student # must be an integer. ");//popup to tell the user that they need to enter an integer
                }
            }
            else if (!txtFirstName.getText().equals("") && !txtLastName.getText().equals(""))
            {
                if (removeStudent(students, txtFirstName.getText(), txtLastName.getText()) > 1)//if more than one employee has this name
                {
                    JOptionPane.showMessageDialog(rootPane, "More than 1 student has this name, remove them by entering the student # or selecting the row instead. ");//popup to tell the user that there are multiple students with this name, use the student number or select a row
                }
                else if (removeStudent(students, txtFirstName.getText(), txtLastName.getText()) == 0)//if no employee matches the user's entered full name
                {
                    JOptionPane.showMessageDialog(rootPane, "This student does not exist in the system. ");//popup to tell the user that the student name they entered doesn't exist
                }
            }
            else 
            {
                JOptionPane.showMessageDialog(rootPane, "You must select one row, enter a student # or a full name. ");//popup to tell the user to select a row
            }
        }
        //reset all the fields
        reset(txtStudentNumber, txtFirstName, txtLastName, txtEmail, txtDob, txtAverageMark, txtParentContactName, txtParentContactEmail, txtParentContactPhone, cboGrade, lblCalculations);

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int studentNumber, studentIndex;//variable for user's entered number and the index in the array of the student being edited
        try 
        {
            if (tblStudent.getSelectedRowCount() == 1)//if the user selected a single row
            {
                studentNumber = (int)tblStudent.getValueAt(tblStudent.getSelectedRow(), 0);//get the employee number of the selected row
                studentIndex = searchNumber(students, studentNumber);//get the index of the user's entered number
            }
            else
            {
                studentNumber = Integer.parseInt(txtStudentNumber.getText());//stores the user's entered number
                studentIndex = searchNumber(students, studentNumber);//get the index of the user's entered number
            }
            
            if (studentIndex == -1)//if the student number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The student # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                //if the user enters the first name, update the first name
                if (!txtFirstName.getText().equals("")) students.get(studentIndex).setFirstName(txtFirstName.getText());
                
                //if the user enters the last name, update the last name
                if (!txtLastName.getText().equals("")) students.get(studentIndex).setLastName(txtLastName.getText());
                
                //if the user enters the email, update the email
                if (!txtEmail.getText().equals("")) students.get(studentIndex).setEmail(txtEmail.getText());
                
                //if the user enters a parent contact name, update the parent name
                if (!txtParentContactName.getText().equals("")) students.get(studentIndex).setParentName(txtParentContactName.getText());
                
                if (cboGrade.getSelectedIndex() != 0)//if the user chose a grade
                {
                    students.get(studentIndex).setGrade(Integer.parseInt((String)cboGrade.getSelectedItem()));//update the student grade 
                }
                
                //if the user enters a parent contact email, update the email
                if (!txtParentContactEmail.getText().equals("")) students.get(studentIndex).setParentEmail(txtParentContactEmail.getText());

                //if the user enters a parent phone number
                if (!txtParentContactPhone.getText().equals(""))
                {
                    if (txtParentContactPhone.getText().length() == 10)
                    {
                        try 
                        {
                            students.get(studentIndex).setParentPhone(Integer.parseInt(txtParentContactPhone.getText()));//update the parent contact phone number 
                        }
                        catch (NumberFormatException e)
                        {
                            JOptionPane.showMessageDialog(rootPane, "The parent contact phone # must be an integer. ");//popup to tell the user that they need to enter an integer
                        }
                    }
                    else 
                    {
                        JOptionPane.showMessageDialog(rootPane, "The parent phone # must 10 digits long. ");//popup to tell the user they need to enter a 10 digit number
                    }
                }
                
                //if the user tries to change the DOB
                if (!txtDob.getText().equals(""))
                {
                    if (checkDob(txtDob.getText()))//if the entered date is valid
                    {
                        students.get(studentIndex).setDob(txtDob.getText());//update the DOB
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "The date entered was not valid. ");//popup to tell the user that they didn't enter a valid date
                    }
                }
                
                //if the user enters an average mark
                if (!txtAverageMark.getText().equals(""))
                {
                    try
                    {
                        double averageMark = Double.parseDouble(txtAverageMark.getText());//read the user's input for average mark
                        if (averageMark < 0 || averageMark > 100)//if the mark is not between 0 and 100
                        {
                            averageMark = -1;//reset the mark to -1 (for checking later)
                            JOptionPane.showMessageDialog(rootPane, "The average mark must be between 0 and 100. ");//popup to tell the user they need to enter a number between 0 and 100
                        }
                        else//if the entered mark was valid
                        {
                            students.get(studentIndex).setAverageMark(averageMark);//set the new average mark
                        }
                    }
                    catch (NumberFormatException e )
                    {
                        JOptionPane.showMessageDialog(rootPane, "The average mark must be a number. ");//popup to tell the user they need to enter a double
                    }
                    
                }
                
                writeFile(students);//update the file
                //reset the fields
                reset(txtStudentNumber, txtFirstName, txtLastName, txtEmail, txtDob, txtAverageMark, txtParentContactName, txtParentContactEmail, txtParentContactPhone, cboGrade, lblCalculations);
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must select one row or enter a student # as an integer. ");//popup to tell the user that they need to enter an integer
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:
        
        readFile(students);//read from the file
        DefaultTableModel tblModel = (DefaultTableModel)tblStudent.getModel();
        
        //removes all of the old rows
        int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
        for (int i = 0; i < count; i++)
        {
            tblModel.removeRow(0);
        }
        
        //check if array list is empty
        if (students.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "You must enter at least one student to list them.");//popup to tell the user that they need to enter at least 1 student
            return; //exit the method
        }
        
        if (cboGrade.getSelectedIndex() == 0)//if the user doesn't chose a grade
        {
            for (int i = 0; i < students.size(); i++)//for each student in the arraylist
            {
                //temporarily store the data into an object array (for adding into the table)
                Object [] objects = {students.get(i).getNumber(), students.get(i).getFirstName(), students.get(i).getLastName(), students.get(i).getEmail(), students.get(i).getGrade(), students.get(i).getDob(), students.get(i).getAverageMark(), students.get(i).getParentName(), students.get(i).getParentEmail(), students.get(i).getParentPhone()};
                tblModel.addRow(objects);//add the row of data into the table
            }
        }
        else
        {
            for (int i = 0; i < students.size(); i++)//for each student in the arraylist
            {
                if (students.get(i).getGrade() == Integer.parseInt((String)cboGrade.getSelectedItem()))//if the student is in the chosen grade
                {
                    //temporarily store the data into an object array (for adding into the table)
                    Object [] objects = {students.get(i).getNumber(), students.get(i).getFirstName(), students.get(i).getLastName(), students.get(i).getEmail(), students.get(i).getGrade(), students.get(i).getDob(), students.get(i).getAverageMark(), students.get(i).getParentName(), students.get(i).getParentEmail(), students.get(i).getParentPhone()};
                    tblModel.addRow(objects);//add the row of data into the table
                }
            }
        }
        
    }//GEN-LAST:event_btnListActionPerformed

    private void btnHelp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelp1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Use this program to store student data. \nAdd: enter all the information to add a student. \nRemove: press a row, enter a student # or enter a full name. \nEdit: press a row or enter a student # and the new information. \nList: press this button with no grade selected to display all the students, or enter a grade to show students in that grade. \nSearch: enter a student number to display the student in the table. ");//instructions for the user
    }//GEN-LAST:event_btnHelp1ActionPerformed

    private void btnStudentMarksAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentMarksAverageActionPerformed
        // TODO add your handling code here:
        if (!Double.isNaN(Student.calculateTotalAverage(students)))//if the average is a number
        {
            lblCalculations.setText("Average: " + Student.calculateTotalAverage(students));//output the average
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "There are no students. ");//popup to tell the user that the average couldn't be found
        }
    }//GEN-LAST:event_btnStudentMarksAverageActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        new FrmMainPage().setVisible(true);//open the main page
        this.dispose();//close the student page
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int studentNumber, studentIndex;
        readFile(students);//read from the file
        try 
        {
            studentNumber = Integer.parseInt(txtStudentNumber.getText());//stores the user's entered number
            studentIndex = searchNumber(students, studentNumber);//get the index of the user's entered number
            
            
            if (studentIndex == -1)//if the student number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The student # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                DefaultTableModel tblModel = (DefaultTableModel)tblStudent.getModel();
        
                //removes all of the old rows
                int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
                for (int i = 0; i < count; i++)
                {
                    tblModel.removeRow(0);
                }
                //check if array list is empty
                if (students.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "You must enter at least one student to list them.");//popup to tell the user that they need to enter at least 1 student
                    return; //exit the method
                }
                
                Object [] objects = {students.get(studentIndex).getNumber(), students.get(studentIndex).getFirstName(), students.get(studentIndex).getLastName(), students.get(studentIndex).getEmail(), students.get(studentIndex).getGrade(), students.get(studentIndex).getDob(), students.get(studentIndex).getAverageMark(), students.get(studentIndex).getParentName(), students.get(studentIndex).getParentEmail(), students.get(studentIndex).getParentPhone()};
                tblModel.addRow(objects);//add the row of data into the table
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must enter a student # as an integer. ");//popup to tell the user that they need to enter an integer
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    //globals and methods
    ArrayList <Student> students = new ArrayList<>();//arraylist of students
    
    //method to read the file into an arraylist
    public static void readFile(ArrayList<Student> arraylist) {
        arraylist.clear();//clear the arraylist
        try {
            BufferedReader reader = new BufferedReader(new FileReader("Employee Database Project//students.txt"));
            
            String line;
            
            while ((line = reader.readLine()) != null) {
                // Split the line by a comma
                String[] parts = line.split(",");
                // Create a new Student object and add it to the ArrayList
                Student student = new Student(parts[0], parts[1], parts[2], parts[3], Integer.parseInt(parts[4]), Integer.parseInt(parts[5]), parts[6], parts[7], Long.parseLong(parts[8]), Double.parseDouble(parts[9]));
                arraylist.add(student);
            }
            reader.close();
        } catch (IOException e) {
            // Handle exceptions appropriately
            e.printStackTrace();
        }
    }
    
    //method to write the arraylist info into a file
    public static void writeFile(ArrayList <Student> arraylist)
    {
        try {
            // Open the file
            BufferedWriter write = new BufferedWriter(new FileWriter("Employee Database Project//students.txt"));

            for (Student student : arraylist) {
                // Write each employee's information               
                write.write(student.toString());
                write.newLine();
            }
            write.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //method to sort the arraylist by student numbers
    public static void sortArraylist(ArrayList <Student> arraylist)
    {
        sortArraylist(arraylist, 0, arraylist.size() - 1);
    }
    //method to sort the arraylist by student numbers
    public static void sortArraylist(ArrayList <Student> arraylist, int p, int r){
        if (r > p) {
            int j = partition(arraylist, p, r);
            sortArraylist(arraylist, p, j - 1);
            sortArraylist(arraylist, j + 1, r);
        }
    }
    //Method for quick sort
    public static int partition(ArrayList <Student> arraylist, int p, int r) {
        int i = p;
        int j = r + 1;
        Student pivot = arraylist.get(p);

        do {
            do {
                i++;
            } while (i <= r && arraylist.get(i).getNumber() < pivot.getNumber());

            do {
                j--;
            } while (arraylist.get(j).getNumber() > pivot.getNumber());

            if (i < j) {
                exchange(arraylist, i, j);
            }
        } while (i < j);

        exchange(arraylist, p, j);
        return j;
    }
    //Method for quick sort
    public static void exchange(ArrayList<Student> arraylist, int i, int j) {
        
        Student temp = arraylist.get(i);
        arraylist.set(i, arraylist.get(j));
        arraylist.set(j, temp);
    }
    
    //method to search for if a student number number is already in the system, returns the index of the student if found, returns -1 if not found
    public static int searchNumber(ArrayList <Student> arraylist, int number)
    {
        for (int i = 0; i < arraylist.size(); i++) {//for each student in the arraylist
            if (arraylist.get(i).getNumber() == number) {//if the student number matches the given number
                return i; // Return the index of the found student
            }
        }
        return -1; // Number not found
    }
    
    //method to check if the date is valid
    public static boolean checkDob(String dob) {
        
        try 
        {
            String[] parts = dob.split("/");
   
            int day = Integer.parseInt(parts[0]);
            int month = Integer.parseInt(parts[1]);
            int year = Integer.parseInt(parts[2]);

            if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1900 || year > 2100) {
                return false; // Invalid month, day, or year
            }

            if (month == 2) {
                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){
                    return day <= 29; // Leap year February
                } else {
                    return day <= 28; // Non-leap year February
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                return day <= 30; // Months with 30 days
            }
            return true; // Valid date
        }
        catch (Exception e)
        {
            return false;
        }
    }
    
    //method to remove student by student number, returns true if removed and removes the student from the arraylist, false if not removed
    public static boolean removeStudent(ArrayList <Student> students, int number)
    {
        int indexToCheck = -1;

        for (int i = 0; i < students.size(); i++) {//for each student in the arraylist
            if (students.get(i).getNumber() == number) {//if the student number matches the given number
                indexToCheck = i;//store the index of the student
                break;
            }
        }

        if (indexToCheck != -1) {//if the index got changed (a student has the given number)
            students.remove(indexToCheck);//remove the student from the arraylist
            writeFile(students);//update the file
            return true;//student with the given number was found and removed
        } else {
            return false; // Students with the given number was not found
        }
    }
    
    //method to remove student by first and last name, returns how many student have that name, if it is one, it will remove the student
    public static int removeStudent(ArrayList <Student> students, String firstName, String lastName)
    {
        int countRemoved = 0;//stores the amount of students with the name
        int index = -1;//stores index of matching student
        for (int i = students.size() - 1; i >= 0; i--) {//for each student in the arraylist
            if (students.get(i).getFirstName().equals(firstName) && students.get(i).getLastName().equals(lastName)) {//if the student name matches the given name
                countRemoved++;//update the counter
            }
        }
        if (countRemoved == 1){//if only one student has that name
            students.remove(index);//remove the student
        }

        writeFile(students); // Update the info to the file
        return countRemoved;
    }
    
    //method to reset the text fields and bottom label (resets 9 textfields, 1 combo box, 1 label)
    public static void reset(JTextField txt1, JTextField txt2, JTextField txt3, JTextField txt4, JTextField txt5, JTextField txt6, JTextField txt7, JTextField txt8, JTextField txt9, JComboBox cbo1, JLabel lbl1)
    {
        //reset all the text to blank and the dropdown menu to the original
        txt1.setText("");
        txt2.setText("");
        txt3.setText("");
        txt4.setText("");
        txt5.setText("");
        txt6.setText("");
        txt7.setText("");
        txt8.setText("");
        txt9.setText("");
        cbo1.setSelectedIndex(0);
        lbl1.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmStudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmStudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmStudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmStudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmStudentPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnHelp1;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnStudentMarksAverage;
    private javax.swing.JComboBox<String> cboGrade;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAverageMark;
    private javax.swing.JLabel lblCalculations;
    private javax.swing.JLabel lblDob;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblParentContactEmail;
    private javax.swing.JLabel lblParentContactName;
    private javax.swing.JLabel lblParentContactPhone;
    private javax.swing.JLabel lblStudentNumber;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTextField txtAverageMark;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtParentContactEmail;
    private javax.swing.JTextField txtParentContactName;
    private javax.swing.JTextField txtParentContactPhone;
    private javax.swing.JTextField txtStudentNumber;
    // End of variables declaration//GEN-END:variables
}
