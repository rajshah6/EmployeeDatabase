/*
 * Rose, Raj, Sophie
 * August 18th, 2023
 * This program will allow the user to store the data of students, employees and the inventory at a school
 * This frame is the inventory information page. 
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class FrmInventoryPage extends javax.swing.JFrame {

    
    public FrmInventoryPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReturn = new javax.swing.JButton();
        btnHelp1 = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventory = new javax.swing.JTable();
        lblItemNumber = new javax.swing.JLabel();
        txtItemNumber = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        lblTotalQuantity = new javax.swing.JLabel();
        txtTotalQuantity = new javax.swing.JTextField();
        lblQuantityIn = new javax.swing.JLabel();
        txtQuantityIn = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Data");
        setResizable(false);

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnHelp1.setText("?");
        btnHelp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelp1ActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTitle.setText("Inventory Data");

        tblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item #", "Name", "Total Quantity", "Total Signed In", "Total Signed Out"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInventory.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblInventory);
        if (tblInventory.getColumnModel().getColumnCount() > 0) {
            tblInventory.getColumnModel().getColumn(0).setResizable(false);
            tblInventory.getColumnModel().getColumn(1).setResizable(false);
            tblInventory.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblInventory.getColumnModel().getColumn(2).setResizable(false);
            tblInventory.getColumnModel().getColumn(3).setResizable(false);
            tblInventory.getColumnModel().getColumn(4).setResizable(false);
        }

        lblItemNumber.setText("Item #: ");

        lblName.setText("Name: ");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        lblTotalQuantity.setText("Total Quantity: ");

        lblQuantityIn.setText("Quantity In:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReturn)
                        .addGap(201, 201, 201)
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHelp1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblItemNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtItemNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAdd))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnRemove)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotalQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(lblQuantityIn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtQuantityIn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEdit)
                                .addGap(43, 43, 43)
                                .addComponent(btnList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch)))
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnHelp1)
                    .addComponent(lblTitle))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemNumber)
                    .addComponent(txtItemNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalQuantity)
                    .addComponent(txtTotalQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantityIn)
                    .addComponent(txtQuantityIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove)
                    .addComponent(btnEdit)
                    .addComponent(btnList)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        new FrmMainPage().setVisible(true);//open the main page
        this.dispose();//close the student page
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnHelp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelp1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Use this program to store data of the school inventory. \nAdd: enter all the information to add an item. \nRemove: press a row, enter an item # or enter the item name. \nEdit: press a row or enter an item # and change the information. \nSearch: enter an item # to display the item in the table. ");//instructions for the user
    }//GEN-LAST:event_btnHelp1ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        readFile(items);//read the file
        //temp variables
        int number = -1, totalQuantity = -1, quantityIn = -1;
        String name;
        
        //if all of the fields are filled
        if (!txtItemNumber.getText().equals("") && !txtName.getText().equals("") && !txtTotalQuantity.getText().equals("") && !txtQuantityIn.getText().equals(""))
        {
            //check validity of item number entered
            try 
            {
                number = Integer.parseInt(txtItemNumber.getText());//read the user's input into the variable
                //check if this already exists in the array
                if (searchNumber(items, number) != -1)//if the number is already used
                {
                    JOptionPane.showMessageDialog(rootPane, "The item # has already been taken. ");//popup to tell the user that this number can't be used
                    number = -1;//reset the item number to -1 (for checking later)
                }
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The item # must be an integer. ");//popup to tell the user that they need to enter an integer
            }
            
            //store the name in it's variable + check validity
            name = txtName.getText();
            if (searchName(items, name) != -1)
            {
                JOptionPane.showMessageDialog(rootPane, "The name has already been used. ");//popup to tell the user that the name is already taken
                name = null;//reset the name (for checking later)
            }
            
            //check validity of total quantity entered by user
            try
            {
                totalQuantity = Integer.parseInt(txtTotalQuantity.getText());
                //if the total quantity is less than 1
                if (totalQuantity < 1)
                {
                    JOptionPane.showMessageDialog(rootPane, "The total quantity must be at least 1. ");//popup to tell the user they need to enter 1 or greater
                    totalQuantity = -1;//reset the total quantity to -1 (for checking later)
                }
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The total quantity must be an integer. ");//popup to tell the user they need to enter an integer
            }
            
            //check validity of quantity in entered by user
            try
            {
                quantityIn = Integer.parseInt(txtQuantityIn.getText());
                //if the quantity in is less than 0 or greater than total quantity
                if (quantityIn < 0 || quantityIn > totalQuantity)
                {
                    JOptionPane.showMessageDialog(rootPane, "The total quantity must be positive and less than the total quantity. ");//popup to tell the user they need to enter a positive number, less than total quantity
                    quantityIn = -1;//reset the quantity in to -1 (for checking later)
                }
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The quantity in must be an integer. ");//popup to tell the user they need to enter an integer
            }
            
            if (number != -1 && totalQuantity != -1 && quantityIn != -1 && name != null)//if the user entered all the proper information
            {
                items.add(new Item(number, totalQuantity, quantityIn, name));//add item
                sortArraylist(items);//sort the arraylist
                writeFile(items); //update the file
                reset(txtItemNumber, txtName, txtTotalQuantity, txtQuantityIn);//reset the fields
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "All the fields must be filled. ");//popup to tell the user not all the fields were filled
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)tblInventory.getModel();
        if (tblInventory.getSelectedRowCount() == 1)//if the user selected a single row
        {
            int rowIndex = tblInventory.getSelectedRow();//variable to store the row the user chose
            int number = (int)tblInventory.getValueAt(rowIndex, 0);//variable for the item number of the row the user wants to remove
            removeItem(items, number);//remove the item from the arraylist
            tblModel.removeRow(rowIndex);//remove the row from the table
            writeFile(items);//update the file
        }
        else
        {
            int itemNumber;//temp variable for user's entered number
            if (!txtItemNumber.getText().equals(""))//if the user entered an item number, use it
            {
                try
                {
                    itemNumber = Integer.parseInt(txtItemNumber.getText());//store the user's entered number in the variable
                    if (!removeItem(items, itemNumber))
                    {
                        JOptionPane.showMessageDialog(rootPane, "The item # does not exist in the system. ");//popup to tell the user that the item number they entered doesn't exist
                    }
                }
                catch (NumberFormatException e)
                {
                    JOptionPane.showMessageDialog(rootPane, "The item # must be an integer. ");//popup to tell the user that they need to enter an integer
                }
            }
            else if (!txtName.getText().equals(""))//if the user entered a name
            {
                if (!removeItem(items, txtName.getText()))//if no item matches the user's entered name
                {
                    JOptionPane.showMessageDialog(rootPane, "This item does not exist in the system. ");//popup to tell the user that the item name they entered doesn't exist
                }
            }
            else 
            {
                JOptionPane.showMessageDialog(rootPane, "You must select one row, enter an item # or a full name. ");//popup to tell the user to select a row
            }
        }
        reset(txtItemNumber, txtName, txtTotalQuantity, txtQuantityIn);//reset the fields
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int itemNumber, itemIndex;//variable for user's entered number and the index in the array of the employee being edited
        try 
        {
            if (tblInventory.getSelectedRowCount() == 1)//if the user selected a single row
            {
                itemNumber = (int)tblInventory.getValueAt(tblInventory.getSelectedRow(), 0);//get the item number of the selected row
                itemIndex = searchNumber(items, itemNumber);//get the index of the user's entered number
            }
            else
            {
                itemNumber = Integer.parseInt(txtItemNumber.getText());//stores the user's entered number
                itemIndex = searchNumber(items, itemNumber);//get the index of the user's entered number
            }
            
            if (itemIndex == -1)//if the employee number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The item # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                //if the user enters a name, change the name
                if (!txtName.getText().equals(""))items.get(itemIndex).setName(txtName.getText());
                
                //if the user enters a total quantity and quantity in
                if (!txtTotalQuantity.getText().equals("") && !txtQuantityIn.getText().equals(""))
                {
                    try
                    {
                        //temp variables for the values 
                        int totalQuantity = Integer.parseInt(txtTotalQuantity.getText());
                        int quantityIn = Integer.parseInt(txtQuantityIn.getText());
                        //if the input is valid (total is 1 or more, total is more than quantity in, quantity in is positive)
                        if (totalQuantity > 0 && totalQuantity >= quantityIn && quantityIn >= 0)
                        {
                            //update the total, quantity in and quantity out
                            items.get(itemIndex).setTotalQuantity(totalQuantity);
                            items.get(itemIndex).setQuantityIn(quantityIn);
                            items.get(itemIndex).setQuantityOut(totalQuantity - quantityIn);//total - quantity in
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "The total quantity must be at least 1 and be greater than current quantity in.\nThe quantity in must at least 0. ");//popup to tell the user they must enter at least 1 and can't be less than the amount in, the amount in can't be negative
                        }
                    }
                    catch (NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(rootPane, "The total quantity and quantity in must be an integer. ");//popup to tell the user that they need to enter an integer
                    }
                }
                
                //if the user enters a total quantity
                else if (!txtTotalQuantity.getText().equals(""))
                {
                    try 
                    {
                        //if the user entered a number is valid (at least 1 and greater than quantity out)
                        if (Integer.parseInt(txtTotalQuantity.getText()) > 0 && Integer.parseInt(txtTotalQuantity.getText()) > items.get(itemIndex).getQuantityOut())
                        {
                            items.get(itemIndex).setTotalQuantity(Integer.parseInt(txtTotalQuantity.getText()));//update the total quantity
                            items.get(itemIndex).setQuantityIn(items.get(itemIndex).getTotalQuantity() - items.get(itemIndex).getQuantityOut());//update the quantity in to be the total - out
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "The total quantity must be at least 1 and be greater than the current quantity out. ");//popup to tell the user they must enter at least 1 and can't be less than the amount out
                        }
                    }
                    catch (NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(rootPane, "The total quantity must be an integer. ");//popup to tell the user that they need to enter an integer
                    }
                }
                
                //if the user enters a quantity in
                else if (!txtQuantityIn.getText().equals(""))
                {
                    try 
                    {
                        //if the user entered a number that is 0 or greater and less than the total quantity
                        if (Integer.parseInt(txtQuantityIn.getText()) >= 0 && Integer.parseInt(txtQuantityIn.getText()) <= items.get(itemIndex).getTotalQuantity())
                        {
                            items.get(itemIndex).setQuantityIn(Integer.parseInt(txtQuantityIn.getText()));//update the quantity in
                            items.get(itemIndex).setQuantityOut(items.get(itemIndex).getTotalQuantity() - items.get(itemIndex).getQuantityIn());//update the quantity out to be the total - in
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "The quantity in must be at positive and less than the total quantity. ");//popup to tell the user they must enter at least 1 and can't be less than the amount out
                        }
                    }
                    catch (NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(rootPane, "The quantity in must be an integer. ");//popup to tell the user that they need to enter an integer
                    }
                }
                
                writeFile(items);//updates the file 
                reset(txtItemNumber, txtName, txtTotalQuantity, txtQuantityIn);//reset the fields
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must select one row or enter an item # as an integer. ");//popup to tell the user that they need to enter an integer
        }
            
                
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:

        readFile(items);//read from the file
        DefaultTableModel tblModel = (DefaultTableModel)tblInventory.getModel();

        //removes old rows
        int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
        for (int i = 0; i < count; i++)
        {
            tblModel.removeRow(0);
        }

        //check if array list is empty
        if (items.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "You must enter at least one item to list them.");//popup to tell the user that they need to enter at least 1 item
            return; //exit the method
        }
        
        for (int i = 0; i < items.size(); i++)//for each item in the arraylist
        {
            //temporarily store the data into an object array (for adding into the table)
            Object [] objects = {items.get(i).getNumber(), items.get(i).getName(), items.get(i).getTotalQuantity(), items.get(i).getQuantityIn(), items.get(i).getQuantityOut()};
            tblModel.addRow(objects);//add the row of data into the table
        }
    }//GEN-LAST:event_btnListActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int itemNumber, itemIndex;//variable for user's entered number and the index in the array of the employee being edited
        readFile(items);//read from the file
        try 
        {
            itemNumber = Integer.parseInt(txtItemNumber.getText());//stores the user's entered number
            itemIndex = searchNumber(items, itemNumber);//get the index of the user's entered number
            
            
            if (itemIndex == -1)//if the employee number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The item # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                DefaultTableModel tblModel = (DefaultTableModel)tblInventory.getModel();

                //removes old rows
                int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
                for (int i = 0; i < count; i++)
                {
                    tblModel.removeRow(0);
                }

                //check if array list is empty
                if (items.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "You must enter at least one item to list them.");//popup to tell the user that they need to enter at least 1 item
                    return; //exit the method
                }
                Object [] objects = {items.get(itemIndex).getNumber(), items.get(itemIndex).getName(), items.get(itemIndex).getTotalQuantity(), items.get(itemIndex).getQuantityIn(), items.get(itemIndex).getQuantityOut()};
                tblModel.addRow(objects);//add the row of data into the table
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must enter an item # as an integer. ");//popup to tell the user that they need to enter an integer
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    //globals and methods
    static ArrayList <Item> items = new ArrayList<>();//stores the items in an arraylist
    
    //method to read a file into an arraylist
    public static void readFile(ArrayList <Item> arraylist)
    {
        arraylist.clear();//clears the arraylist
        try {
            // Open the file for reading 
            BufferedReader read = new BufferedReader(new FileReader("items.txt"));
            
            String line;
            
            while ((line = read.readLine()) != null) {
                // Split the line by a comma
                String[] parts = line.split(",");
                // Create a new Employee object and add it to the ArrayList
                Item item = new Item(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2]), Integer.parseInt(parts[3]),parts[4]);
                
                arraylist.add(item);
            }
            read.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        } 
    }
    
    //method to write an arraylist into a file
    public static void writeFile(ArrayList <Item> arraylist)
    {
        try {
            // Open the file
            BufferedWriter write = new BufferedWriter(new FileWriter("items.txt"));

            for (Item item : arraylist) {
                // Write each employee's information
                write.write(item.toString());
                write.newLine();
            }
            write.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //method to sort the arraylist by item numbers
    public static void sortArraylist(ArrayList <Item> arraylist)
    {
        sortArraylist(arraylist, 0, arraylist.size() - 1);//calls the method to sort
    }
    //method to sort the arraylist by item numbers
    public static void sortArraylist(ArrayList <Item> arraylist, int p, int r){
        if (r > p) {
            int j = partition(arraylist, p, r);
            sortArraylist(arraylist, p, j - 1);
            sortArraylist(arraylist, j + 1, r);
        }
    }
    //Method for quick sort
    public static int partition(ArrayList<Item> arraylist, int p, int r) {
        int i = p;
        int j = r + 1;
        Item pivot = arraylist.get(p);

        do {
            do {
                i++;
            } while (i <= r && arraylist.get(i).getNumber() < pivot.getNumber());

            do {
                j--;
            } while (arraylist.get(j).getNumber() > pivot.getNumber());

            if (i < j) {
                exchange(arraylist, i, j);
            }
        } while (i < j);

        exchange(arraylist, p, j);
        return j;
    }
    //Method for quick sort
    public static void exchange(ArrayList<Item> arraylist, int i, int j) {
        
        Item temp = arraylist.get(i);
        arraylist.set(i, arraylist.get(j));
        arraylist.set(j, temp);
    }
    
    //method to search for if an item number is already in the system, returns the index of the item if found, returns -1 if not found
    public static int searchNumber(ArrayList <Item> arraylist, int number)
    {
        for (int i = 0; i < arraylist.size(); i++) {//for each item in the arraylist
            if (arraylist.get(i).getNumber() == number) {//if the number in the arraylist matches the given number
                return i; // Return the index of the found employee
            }
        }
        return -1; // Number not found
    }
    
    //method to search for if a name is already in the system, returns the index of the item if found, returns -1 if not found
    public static int searchName(ArrayList <Item> arraylist, String name)
    {
        for (int i = 0; i < arraylist.size(); i++) {//for each item in the arraylist
            if (arraylist.get(i).getName().equalsIgnoreCase(name)) {//if the name in the arraylist matches the entered name
                return i; // Return the index of the found item
            }
        }
        return -1; // Name not found
    }
    
    //method to remove item by item number, returns true if removed and removes the employee from the arraylist, false if not removed
    public static boolean removeItem(ArrayList <Item> arraylist, int number)
    {
        int index = searchNumber(arraylist, number); // Find the index of the item with the item number
        
        if (index != -1) {//if the item is found
            arraylist.remove(index); // Remove the item
            writeFile(arraylist);//update the file
            return true; 
        }
        return false; // Item not found 
    }
    
    //method to remove item by name, returns true if removed and removes item from the arraylist, false if not removed
    public static boolean removeItem(ArrayList <Item> arraylist, String name)
    {
        int index = searchName(arraylist, name); // Find the index of the item with the item name
        
        if (index != -1) {
            arraylist.remove(index); // Remove the item
            writeFile(arraylist); //update the file
            return true; 
        }
        return false; // Item not found
    }
    
    //method to reset the text fields and bottom label (resets 4 textfields)
    public static void reset(JTextField txt1, JTextField txt2, JTextField txt3, JTextField txt4)
    {
        //reset all the text to blank and the dropdown menu to the original
        txt1.setText("");
        txt2.setText("");
        txt3.setText("");
        txt4.setText("");
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInventoryPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInventoryPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInventoryPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInventoryPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInventoryPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHelp1;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItemNumber;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblQuantityIn;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalQuantity;
    private javax.swing.JTable tblInventory;
    private javax.swing.JTextField txtItemNumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtQuantityIn;
    private javax.swing.JTextField txtTotalQuantity;
    // End of variables declaration//GEN-END:variables
}
