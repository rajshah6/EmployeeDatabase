/*
 * August 18th, 2023
 * This program will allow the user to store the data of students, employees and the inventory at a school
 * This frame is the employee information page. 
 */

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;


public class FrmEmployeePage extends javax.swing.JFrame {


    /**
     * Creates new form FrmEmployeePage
     */
    public FrmEmployeePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        btnReturn = new javax.swing.JButton();
        lblEmployeeNumber = new javax.swing.JLabel();
        txtEmployeeNumber = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblDob = new javax.swing.JLabel();
        txtDob = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblPosition = new javax.swing.JLabel();
        txtPosition = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblSalary = new javax.swing.JLabel();
        txtSalary = new javax.swing.JTextField();
        lblDepartment = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        cboDepartment = new javax.swing.JComboBox<>();
        btnTotalSalary = new javax.swing.JButton();
        btnAverageSalary = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        lblCalculations = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Data");
        setName("EmployeeFrame"); // NOI18N
        setResizable(false);

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee #", "First Name", "Last Name", "Email", "Phone #", "DOB", "Position", "Department", "Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblEmployee);
        if (tblEmployee.getColumnModel().getColumnCount() > 0) {
            tblEmployee.getColumnModel().getColumn(0).setResizable(false);
            tblEmployee.getColumnModel().getColumn(0).setPreferredWidth(60);
            tblEmployee.getColumnModel().getColumn(1).setResizable(false);
            tblEmployee.getColumnModel().getColumn(2).setResizable(false);
            tblEmployee.getColumnModel().getColumn(3).setResizable(false);
            tblEmployee.getColumnModel().getColumn(3).setPreferredWidth(195);
            tblEmployee.getColumnModel().getColumn(4).setResizable(false);
            tblEmployee.getColumnModel().getColumn(4).setPreferredWidth(105);
            tblEmployee.getColumnModel().getColumn(5).setResizable(false);
            tblEmployee.getColumnModel().getColumn(6).setResizable(false);
            tblEmployee.getColumnModel().getColumn(7).setResizable(false);
            tblEmployee.getColumnModel().getColumn(8).setResizable(false);
        }

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblEmployeeNumber.setText("Employee #: ");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        lblFirstName.setText("First Name");

        lblLastName.setText("Last Name");

        lblEmail.setText("Email");

        lblDob.setText("Date of Birth (dd/mm/yyyy): ");

        lblPhone.setText("Phone #: ");

        lblPosition.setText("Position: ");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTitle.setText("Employee Data");

        lblSalary.setText("Salary: ");

        lblDepartment.setText("Department: ");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        cboDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "French", "Language", "Business", "Math", "Technology", "Phys. Ed", "Art", "History", "Humanities", "Science", "Law", "Music", "Other" }));

        btnTotalSalary.setText("Total Salary");
        btnTotalSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalSalaryActionPerformed(evt);
            }
        });

        btnAverageSalary.setText("Average Salary");
        btnAverageSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAverageSalaryActionPerformed(evt);
            }
        });

        btnHelp.setText("?");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReturn)
                                .addGap(380, 380, 380)
                                .addComponent(lblTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnHelp))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnTotalSalary)
                                .addGap(18, 18, 18)
                                .addComponent(btnAverageSalary)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(266, 266, 266)
                                .addComponent(lblCalculations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 809, Short.MAX_VALUE)
                        .addComponent(btnSearch)
                        .addGap(113, 113, 113)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEmployeeNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmployeeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblLastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDob)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemove)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblSalary)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblPosition)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDepartment))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnList)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPhone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cboDepartment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(lblTitle)
                    .addComponent(btnHelp))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployeeNumber)
                    .addComponent(txtEmployeeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPosition)
                        .addComponent(txtPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDepartment)
                        .addComponent(cboDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSalary)
                        .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDob)
                        .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove)
                            .addComponent(btnEdit)
                            .addComponent(btnList)
                            .addComponent(btnAdd))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTotalSalary)
                            .addComponent(btnAverageSalary)
                            .addComponent(lblCalculations, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        new FrmMainPage().setVisible(true);//open the main page
        this.dispose();//close the employee page
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        readFile(employees);//read the file
        //temp variables 
        int employeeNumber = -1;
        long phone = -1;
        String firstName, lastName, email, dob, position, department;
        double salary = -1;
        
        //if all of the fields are filled/selected
        if (!txtEmployeeNumber.getText().equals("") && !txtFirstName.getText().equals("") && 
                !txtLastName.getText().equals("") && !txtEmail.getText().equals("") && 
                !txtPhone.getText().equals("") && !txtDob.getText().equals("") && 
                !txtSalary.getText().equals("") && !txtPosition.getText().equals("") && 
                cboDepartment.getSelectedIndex() != 0)
        {
            //check validity of employee number
            try 
            {
                employeeNumber = Integer.parseInt(txtEmployeeNumber.getText());//read the user's input into the variable
                //check if this already exists in the array
                if (searchNumber(employees, employeeNumber) != -1)//if the number is already used
                {
                    JOptionPane.showMessageDialog(rootPane, "The employee # has already been taken. ");//popup to tell the user that this number can't be used
                    employeeNumber = -1;//reset the employee number to -1 (for checking later)
                }
                
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The employee # must be an integer. ");//popup to tell the user that they need to enter an integer
            }
            
            //store the first name, last name, email, position and department in their variables
            firstName = txtFirstName.getText();
            lastName = txtLastName.getText();
            email = txtEmail.getText();
            position = txtPosition.getText();
            department = (String)cboDepartment.getSelectedItem();
            
            //check validity of dob
            dob = txtDob.getText();//store the user's entered DOB
            if (!checkDob(dob))//if the entered date is not valid
            {
                dob = null;//set the variable to null (for checking later)
                JOptionPane.showMessageDialog(rootPane, "The date of birth must be a valid date. ");//popup to tell the user that they didn't enter a valid date
            }
            
            //check validity of phone number
            if (txtPhone.getText().length() == 10)//if the phone number is 10 digits
            {
                try
                {
                    phone = Long.parseLong(txtPhone.getText());
                }
                catch (NumberFormatException e)
                {
                    JOptionPane.showMessageDialog(rootPane, "The phone # must be a number. ");//popup to tell the user they need to enter an integer
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "The phone # must be 10 digits long. ");//popup to tell the user they need to enter a 10 digit number
            }
                        
            //check validity of salary
            try
            {
                salary = Double.parseDouble(txtSalary.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(rootPane, "The salary must be a dollar value. ");//popup to tell the user they need to enter a double
            }
            
            if (employeeNumber != -1 && phone != -1 && salary != -1 && dob != null)//if the user entered all the proper information
            {
                employees.add(new Employee(firstName, lastName, dob, email, employeeNumber, phone, position, department, salary));//add employee
                sortArraylist(employees);//sort the arraylist
                writeFile(employees); //update the file
                //reset the fields
                reset(txtEmployeeNumber, txtFirstName, txtLastName, txtEmail, txtPhone, txtDob, txtSalary, txtPosition, cboDepartment, lblCalculations);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "All the fields must be filled. ");//popup to tell the user not all the fields were filled
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)tblEmployee.getModel();
        if (tblEmployee.getSelectedRowCount() == 1)//if the user selected a single row
        {
            int rowIndex = tblEmployee.getSelectedRow();//variable to store the row the user chose
            int number = (int)tblEmployee.getValueAt(rowIndex, 0);//variable for the employee number of the row the user wants to remove
            removeEmployee(employees, number);//remove the employee from the arraylist
            tblModel.removeRow(rowIndex);//remove the row from the table
        }
        else
        {
            int employeeNumber;//temp variable for user's entered number
            if (!txtEmployeeNumber.getText().equals(""))//if the user entered an employee number, use it
            {
                try
                {
                    employeeNumber = Integer.parseInt(txtEmployeeNumber.getText());//store the user's entered number in the variable
                    if (!removeEmployee(employees, employeeNumber))//if the employee can't be removed
                    {
                        JOptionPane.showMessageDialog(rootPane, "The employee # does not exist in the system. ");//popup to tell the user that the employee number they entered doesn't exist
                    }
                }
                catch (NumberFormatException e)
                {
                    JOptionPane.showMessageDialog(rootPane, "The employee # must be an integer. ");//popup to tell the user that they need to enter an integer
                }
            }
            else if (!txtFirstName.getText().equals("") && !txtLastName.getText().equals(""))//if the user entered a name
            {
                
                if (removeEmployee(employees, txtFirstName.getText(), txtLastName.getText()) > 1)//if more than one employee has this name
                {
                    JOptionPane.showMessageDialog(rootPane, "More than 1 employee has this name, remove them by entering the employee # or selecting the row instead. ");//popup to tell the user that there are multiple employees with this name, use the employee number or select a row
                }
                
                else if (removeEmployee(employees, txtFirstName.getText(), txtLastName.getText()) == 0)//if no employee matches the user's entered full name
                {
                    JOptionPane.showMessageDialog(rootPane, "This employee does not exist in the system. ");//popup to tell the user that the employee name they entered doesn't exist
                }
            }
            else 
            {
                JOptionPane.showMessageDialog(rootPane, "You must select one row, enter an employee # or a full name. ");//popup to tell the user to select a row
            }
        }
        //reset all the fields
        reset(txtEmployeeNumber, txtFirstName, txtLastName, txtEmail, txtPhone, txtDob, txtSalary, txtPosition, cboDepartment, lblCalculations);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int employeeNumber, employeeIndex;//variable for user's entered number and the index in the array of the employee being edited
        try 
        {
            if (tblEmployee.getSelectedRowCount() == 1)//if the user selected a single row
            {
                employeeNumber = (int)tblEmployee.getValueAt(tblEmployee.getSelectedRow(), 0);//get the employee number of the selected row
                employeeIndex = searchNumber(employees, employeeNumber);//get the index of the user's entered number
            }
            else
            {
                employeeNumber = Integer.parseInt(txtEmployeeNumber.getText());//stores the user's entered number
                employeeIndex = searchNumber(employees, employeeNumber);//get the index of the user's entered number
            }
            
            if (employeeIndex == -1)//if the employee number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The employee # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                //if the user enters the first name, update the first name
                if (!txtFirstName.getText().equals("")) employees.get(employeeIndex).setFirstName(txtFirstName.getText());
                
                //if the user enters the last name, update the last name
                if (!txtLastName.getText().equals("")) employees.get(employeeIndex).setLastName(txtLastName.getText());
                
                //if the user enters the email, update the email
                if (!txtEmail.getText().equals("")) employees.get(employeeIndex).setEmail(txtEmail.getText());
                
                //if the user enters a phone number
                if (!txtPhone.getText().equals(""))
                {
                    if (txtPhone.getText().length() == 10)
                    {
                        try 
                        {
                            employees.get(employeeIndex).setPhone(Long.parseLong(txtPhone.getText()));//update the phone number 
                        }
                        catch (NumberFormatException e)
                        {
                            JOptionPane.showMessageDialog(rootPane, "The phone # must be a number. ");//popup to tell the user that they need to enter an integer
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "The phone # must be a 10 digits long. ");//popup to tell the user that they need to enter a 10 digit number
                    }
                }
                
                //if the user enters a salary
                if (!txtSalary.getText().equals(""))
                {
                    try 
                    {
                        employees.get(employeeIndex).setSalary(Double.parseDouble(txtSalary.getText()));//update the salary
                    }
                    catch (NumberFormatException e)
                    {
                        JOptionPane.showMessageDialog(rootPane, "The salary must be a dollar value. ");//popup to tell the user that they need to enter a double
                    }
                }
                
                //if the user tries to change the DOB
                if (!txtDob.getText().equals(""))
                {
                    if (checkDob(txtDob.getText()))//if the entered date is valid
                    {
                        employees.get(employeeIndex).setDob(txtDob.getText());//update the DOB
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "The date entered was not valid. ");//popup to tell the user that they didn't enter a valid date
                    }
                }
                
                //if the user enters a position, update the position
                if (!txtPosition.getText().equals("")) employees.get(employeeIndex).setPosition(txtPosition.getText());
                
                //if the user enters a department, update the department
                if (cboDepartment.getSelectedIndex() != 0)employees.get(employeeIndex).setDepartment((String)cboDepartment.getSelectedItem());
                
                writeFile(employees);//updates the file 
                //reset all the fields
                reset(txtEmployeeNumber, txtFirstName, txtLastName, txtEmail, txtPhone, txtDob, txtSalary, txtPosition, cboDepartment, lblCalculations);
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must select one row or enter an employee # as an integer. ");//popup to tell the user that they need to enter an integer
        }
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:
        
        readFile(employees);//read from the file
        DefaultTableModel tblModel = (DefaultTableModel)tblEmployee.getModel();
        
        //removes all of the old rows
        int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
        for (int i = 0; i < count; i++)
        {
            tblModel.removeRow(0);
        }
        
        //check if array list is empty
        if (employees.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "You must enter at least one employee to list them.");//popup to tell the user that they need to enter at least 1 employee
            return; //exit the method
        }
        
        if (cboDepartment.getSelectedIndex() == 0)//if the user didn't select a department
        {
            for (int i = 0; i < employees.size(); i++)//for each employee in the arraylist
            {
                //temporarily store the data into an object array (for adding into the table)
                Object [] objects = {employees.get(i).getNumber(), employees.get(i).getFirstName(), employees.get(i).getLastName(), employees.get(i).getEmail(), employees.get(i).getPhone(), employees.get(i).getDob(), employees.get(i).getPosition(), employees.get(i).getDepartment(), employees.get(i).getSalary()};
                tblModel.addRow(objects);//add the row of data into the table
            }
        }
        else
        {
            for (int i = 0; i < employees.size(); i++)//for each employee in the arraylist
            {
                if (employees.get(i).getDepartment().equals(cboDepartment.getSelectedItem()))//if the employee is in the chosen department
                {
                    //temporarily store the data into an object array (for adding into the table)
                    Object [] objects = {employees.get(i).getNumber(), employees.get(i).getFirstName(), employees.get(i).getLastName(), employees.get(i).getEmail(), employees.get(i).getPhone(), employees.get(i).getDob(), employees.get(i).getPosition(), employees.get(i).getDepartment(), employees.get(i).getSalary()};
                    tblModel.addRow(objects);//add the row of data into the table
                }
            }
        }
    }//GEN-LAST:event_btnListActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Use this program to store employee data. \nAdd: enter all the information to add an employee. \nRemove: press a row, enter an employee # or enter a full name. \nEdit: press a row or enter an employee # and change the information. \nList: press this button with no department selected to show all the employees, or enter a department to show only the employees in that department. \nSearch: enter an employee # to display the employee data in the table. \nAverage Salary: press this button with no department selected to get the total average salary, or enter a department to get the department average. ");//instructions for the user
    }//GEN-LAST:event_btnHelpActionPerformed

    private void btnTotalSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalSalaryActionPerformed
        // TODO add your handling code here:
        lblCalculations.setText("Total Salary: $" + Employee.calculateTotal(employees));//output the total salary
    }//GEN-LAST:event_btnTotalSalaryActionPerformed

    private void btnAverageSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAverageSalaryActionPerformed
        // TODO add your handling code here:
        if (cboDepartment.getSelectedIndex() != 0 && !Double.isNaN(Employee.calculateAverage(employees, (String)cboDepartment.getSelectedItem())))//if the user chose a department and the average is a number (the department isn't empty)
        {
            lblCalculations.setText("Average Salary for " + cboDepartment.getSelectedItem() + " department: $" + Employee.calculateAverage(employees, (String)cboDepartment.getSelectedItem()));//output the average department salary
        }
        else if (!Double.isNaN(Employee.calculateAverage(employees)))//if the average is a number (the list isn't empty)
        {
            lblCalculations.setText("Average Salary: $" + Employee.calculateAverage(employees));//output the average of all the employees
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "There are no employees to get the average salary. ");//popup to tell the user that the average couldn't be found
        }
    }//GEN-LAST:event_btnAverageSalaryActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int employeeNumber, employeeIndex;//variable for user's entered number and the index in the array of the employee being edited
        readFile(employees);//read from the file
        try 
        {
            employeeNumber = Integer.parseInt(txtEmployeeNumber.getText());//stores the user's entered number
            employeeIndex = searchNumber(employees, employeeNumber);//get the index of the user's entered number
            
            if (employeeIndex == -1)//if the employee number doesn't exist
            {
                JOptionPane.showMessageDialog(rootPane, "The employee # was not found. ");//popup to tell the user that they need to enter an existing number
            }
            else 
            {
                DefaultTableModel tblModel = (DefaultTableModel)tblEmployee.getModel();
        
                //removes all of the old rows
                int count = tblModel.getRowCount();//keeps track of the amount of rows to delete
                for (int i = 0; i < count; i++)
                {
                    tblModel.removeRow(0);
                }
        
                //check if array list is empty
                if (employees.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "You must enter at least one employee to list them.");//popup to tell the user that they need to enter at least 1 employee
                    return; //exit the method
                }
                Object [] objects = {employees.get(employeeIndex).getNumber(), employees.get(employeeIndex).getFirstName(), employees.get(employeeIndex).getLastName(), employees.get(employeeIndex).getEmail(), employees.get(employeeIndex).getPhone(), employees.get(employeeIndex).getDob(), employees.get(employeeIndex).getPosition(), employees.get(employeeIndex).getDepartment(), employees.get(employeeIndex).getSalary()};
                tblModel.addRow(objects);//add the row of data into the table
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "You must enter an employee # as an integer. ");//popup to tell the user that they need to enter an integer
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    //globals and methods
    static ArrayList <Employee> employees = new ArrayList<>();//stores the employees in an arraylist
    
    //method to read a file into an arraylist
    public static void readFile(ArrayList <Employee> arraylist){
        arraylist.clear();//clears the arraylist
        try {
            // Open the file for reading 
            BufferedReader read = new BufferedReader(new FileReader("employees.txt"));
            
            String line;
            
            while ((line = read.readLine()) != null) {
                // Split the line by a comma
                String[] parts = line.split(",");
                // Create a new Employee object and add it to the ArrayList
                Employee employee = new Employee(parts[0], parts[1], parts[2], parts[3],Integer.parseInt(parts[4]), Long.parseLong(parts[5]),parts[6], parts[7], Double.parseDouble(parts[8]));
                arraylist.add(employee);
            }
            read.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        } 
    }
    
    //method to write the arraylist info into the file
    public static void writeFile(ArrayList <Employee> arraylist){
        
        try {
            // Open the file
            BufferedWriter write = new BufferedWriter(new FileWriter("employees.txt"));

            for (Employee employee : arraylist) {
                // Write each employee's information
                write.write(employee.toString());
                write.newLine();
            }
            write.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //method to sort the arraylist by employee numbers
    public static void sortArraylist(ArrayList <Employee> arraylist)
    {
        sortArraylist(arraylist, 0, arraylist.size() - 1);//calls the method to sort
    }
    //method to sort the arraylist by employee numbers
    public static void sortArraylist(ArrayList <Employee> arraylist, int p, int r){
        if (r > p) {
            int j = partition(arraylist, p, r);
            sortArraylist(arraylist, p, j - 1);
            sortArraylist(arraylist, j + 1, r);
        }
    }
    //Method for quick sort
    public static int partition(ArrayList<Employee> arraylist, int p, int r) {
        int i = p;
        int j = r + 1;
        Employee pivot = arraylist.get(p);

        do {
            do {
                i++;
            } while (i <= r && arraylist.get(i).getNumber() < pivot.getNumber());

            do {
                j--;
            } while (arraylist.get(j).getNumber() > pivot.getNumber());

            if (i < j) {
                exchange(arraylist, i, j);
            }
        } while (i < j);

        exchange(arraylist, p, j);
        return j;
    }
    //Method for quick sort
    public static void exchange(ArrayList<Employee> arraylist, int i, int j) {
        
        Employee temp = arraylist.get(i);
        arraylist.set(i, arraylist.get(j));
        arraylist.set(j, temp);
    }
    
    //method to search for if an employee number is already in the system, returns the index of the employee if found, returns -1 if not found
    public static int searchNumber(ArrayList <Employee> arraylist, int number)
    {
        for (int i = 0; i < arraylist.size(); i++) {//for each employee in the arraylist
            if (arraylist.get(i).getNumber() == number) {//if the employee number matches the given number
                return i; // Return the index of the found employee
            }
        }
        return -1; // Number not found
    }
    
    //method to check if the date is valid
    public static boolean checkDob(String dob) {
        
        try 
        {
            String[] parts = dob.split("/");
   
            int day = Integer.parseInt(parts[0]);
            int month = Integer.parseInt(parts[1]);
            int year = Integer.parseInt(parts[2]);

            if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1900 || year > 2100) {
                return false; // Invalid month, day, or year
            }

            if (month == 2) {
                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){
                    return day <= 29; // Leap year February
                } else {
                    return day <= 28; // Non-leap year February
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                return day <= 30; // Months with 30 days
            }
            return true; // Valid date
        }
        catch (Exception e)
        {
            return false;//invalid date
        }

        
        
    }
    
    //method to remove employee by employee number, returns true if removed and removes the employee from the arraylist, false if not removed
    public static boolean removeEmployee(ArrayList <Employee> arraylist, int number)
    {
        int indexToCheck = -1;

        for (int i = 0; i < arraylist.size(); i++) {//for each employee in the arraylist
            if (arraylist.get(i).getNumber() == number) {//if the employee number matches the given number
                indexToCheck = i;//store the index of the employee
                break;
            }
        }

        if (indexToCheck != -1) {//if the variable was changed
            arraylist.remove(indexToCheck);//remove the employee
            writeFile(arraylist);//update the file
            return true;
        } else {
            return false; // Employee with the given number was not found
        }
    }
    
    //method to remove employee by first and last name, returns how many employees have that name, if it is one, it will remove the employee
    public static int removeEmployee(ArrayList <Employee> arraylist, String firstName, String lastName)
    {
        int countRemoved = 0;//keeps track of how many employees have the name
        int index = -1;//stores index of matching employee
        for (int i = arraylist.size() - 1; i >= 0; i--) {//for each employee in the arraylist
            if (arraylist.get(i).getFirstName().equals(firstName) && arraylist.get(i).getLastName().equals(lastName)) {//if the employee name matches the given name
                countRemoved++;//add to the counter
                index = i;//save the index of the employee
            }
        }
        if (countRemoved == 1){//if one employee has the name
            arraylist.remove(index);//remove the employee that has that name
        }
        writeFile(arraylist); // Update the info to the file
        return countRemoved;//return the amount of employees with that name
    }
    
    //method to reset the text fields and bottom label (resets 8 textfields, 1 combo box, 1 label)
    public static void reset(JTextField txt1, JTextField txt2, JTextField txt3, JTextField txt4, JTextField txt5, JTextField txt6, JTextField txt7, JTextField txt8, JComboBox cbo1, JLabel lbl1)
    {
        //reset all the text to blank and the dropdown menu to the original
        txt1.setText("");
        txt2.setText("");
        txt3.setText("");
        txt4.setText("");
        txt5.setText("");
        txt6.setText("");
        txt7.setText("");
        txt8.setText("");
        cbo1.setSelectedIndex(0);
        lbl1.setText("");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmEmployeePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAverageSalary;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTotalSalary;
    private javax.swing.JComboBox<String> cboDepartment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCalculations;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblDob;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmployeeNumber;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblSalary;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmployeeNumber;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPosition;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables
}
